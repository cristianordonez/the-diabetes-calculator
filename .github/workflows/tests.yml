name: PostgreSQL unit integration tests
on: push

jobs:
  # Label of the runner job
          
  runner-job:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci
      - name: create env file
        run: |
            touch .env
            echo DATABASE_USER=${{ secrets.DATABASE_USER}} >> .env
            echo DATABASE_HOST=${{ secrets.DATABASE_HOST}} >> .env
            echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD}} >> .env
            echo NODE_ENV=${{ secrets.NODE_ENV}} >> .env
            echo GMAIL_OAUTH_CLIENT_SECRET=${{ secrets.GMAIL_OAUTH_CLIENT_SECRET}} >> .env
            echo GMAIL_OAUTH_CLIENT_ID=${{ secrets.GMAIL_OAUTH_CLIENT_ID}} >> .env
            echo GOOGLE_SIGNIN_CLIENT_SECRET=${{ secrets.GOOGLE_SIGNIN_CLIENT_SECRET}} >> .env
            echo GOOGLE_SIGNIN_CLIENT_ID=${{ secrets.GOOGLE_SIGNIN_CLIENT_ID}} >> .env
            echo GMAIL_REFRESH_TOKEN=${{ secrets.GMAIL_REFRESH_TOKEN}} >> .env
      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data
        run: npx ts-node server/database/db.ts
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.

      - name: run tests
        run: npm run jest
